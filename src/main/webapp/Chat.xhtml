<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">
    <h:head>
        <title>Chat</title>
        <style>
            body {
                background-color: #2c3e50;
                background: linear-gradient(white, #2c3e50);
                margin: 0;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                color: #ffffff;
            }
            /* Estilo general del panel del chat */
            #chatPanel {
                border: 1px solid #ccc;
                height: 300px;
                overflow-y: auto;
                padding: 10px;
                background-color: #f9f9f9;
            }

            /* Estilo del contenedor de los mensajes */
            .message-container {
                display: flex; /* Usa flexbox para alinear los elementos */
                flex-direction: column; /* Alinea los elementos en columna */
                border: 1px solid #ddd;
                border-radius: 8px;
                margin-bottom: 10px;
                padding: 10px;
                background-color: #fff;
                box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
                position: relative; /* Para posicionar el estado "Visto" absolutamente */
            }

            /* Estilo del nombre del usuario */
            .message-container .user-name {
                font-weight: bold;
                margin-bottom: 5px;
            }

            /* Estilo del texto del mensaje */
            .message-container .message-text {
                margin-bottom: 5px;

            }

            /* Estilo de la fecha */
            .message-container .message-date {
                font-size: 0.7em; /* Ajusta el tamaño del texto de la fecha */
                color: #666;
                margin-bottom: 5px;
            }

            /* Estilo del icono de estado */
            .message-container .status-icon {
                font-size: 1.2em; /* Ajusta el tamaño del ícono si es necesario */
                color: #007bff;   /* Cambia el color según tus necesidades */
                position: absolute; /* Posiciona el estado "Visto" absolutamente */
                bottom: 10px; /* Alinea el estado al fondo del contenedor */
                right: 10px;  /* Alinea el estado a la derecha del contenedor */
                display: flex;
                align-items: center;
            }

            /* Estilo del input y botón */
            #message {
                width: calc(100% - 80px);
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 4px;
                margin-right: 10px;
            }

            button {
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
                background-color: #007bff;
                color: #fff;
                cursor: pointer;
            }

            button:hover {
                background-color: #0056b3;
            }

            #messages {
                overflow-y: auto;
                height: 300px; /* Ajusta según tus necesidades */
                list-style-type: none;
                padding: 0;
                margin: 0;
            }

            .custom-menubar {
                background-color: #34495e !important; /* Cambia esto al color que desees */
                border: none !important;
            }

            .custom-menubar .ui-menuitem .ui-menuitem-text {
                color: #ffffff !important; /* Texto blanco */
            }

            /* Cambia el color de los iconos */
            .custom-menubar .ui-menuitem-icon {
                color: #ffffff !important; /* Color blanco para los iconos */
            }

            .menu-search {
                width: 200px; /* Ajusta el ancho del campo de búsqueda */
            }

            .menu-search .ui-inputtext {
                background-color: #fff; /* Color de fondo del campo de búsqueda */
                color: #333; /* Color del texto en el campo de búsqueda */
                border: 1px solid #ccc; /* Borde del campo de búsqueda */
            }
            
            
            .ui-autocomplete {
                z-index: 1000; /* Asegura que la lista desplegable esté encima de otros elementos */
            }

            .notification-badge {
                position: relative;
                display: inline-block;
            }

            .notification-badge .badge {
                position: absolute;
                top: -10px;
                right: -10px;
                padding: 5px 10px;
                border-radius: 50%;
                background-color: red;
                color: white;
                font-size: 12px;
            }
            .chat-list {
                max-height: 300px;
                overflow-y: auto;
                padding: 10px;
                background-color: #fff;
                border-radius: 5px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            }

            .chat-item {
                padding: 10px;
                border-bottom: 1px solid #ddd;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

            .chat-item:hover {
                background-color: #f0f0f0;
            }

            .chat-item:last-child {
                border-bottom: none;
            }

            .chat-avatar {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                margin-right: 10px;
                background-color: #ccc;
                display: flex;
                justify-content: center;
                align-items: center;
                color: white;
                font-weight: bold;
            }

            .chat-name {
                font-size: 14px;
                color: #333;
            }
            
            .chat-unread {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background-color: red;
                margin-left: auto;
            }
        </style>
        <script type="text/javascript">
            var ws;
            var reconnectInterval = 5000; // 5 seconds
            var maxReconnectAttempts = 10;
            var reconnectAttempts = 0;

            function connect() {
                ws = new WebSocket("ws://localhost:8080/Red_Social_Academica/websocket/chat");

                ws.onmessage = function (event) {
                    const message = event.data;
                    console.log("Received message: " + message); // Debugging log
                    if (message.startsWith("COMMAND:")) {
                        const command = message.split(":")[1];
                        console.log("Received command: " + command); // Debugging log
                        if (command === "CLEAR_CHAT") {
                            clearChat();
                        }
                    } else {
                        const messageList = document.getElementById('messages');
                        const messageItem = formatMessage(message);
                        if (messageItem) {
                            messageList.appendChild(messageItem);
                            scrollToBottom();
                        }
                    }
                };

                ws.onopen = function () {
                    console.log('Connected to chat');

                };

                ws.onclose = function (event) {
                    console.log('Disconnected from chat', event);

                };

                ws.onerror = function (error) {
                    console.error('WebSocket error: ', error);
                    ws.close();
                };
            }

            function sendMessage() {
                if (ws.readyState === WebSocket.OPEN) {
                    const messageInput = document.getElementById('message');
                    const message = messageInput ? messageInput.value : '';
                    if (message.trim() !== '') {
                        ws.send(message);
                        messageInput.value = '';
                    } else {
                        console.error('Message is empty');
                    }
                } else {
                    console.error('WebSocket is not open or not initialized');
                }
            }

            function clearChat() {
                const messageList = document.getElementById('messages');
                while (messageList.firstChild) {
                    messageList.removeChild(messageList.firstChild);
                }
            }

            function scrollToBottom() {
                const messages = document.getElementById('messages');
                if (messages.lastElementChild) {
                    messages.lastElementChild.scrollIntoView();
                }
            }

            function formatMessage(message) {
                // Expresión regular para extraer las partes del mensaje
                const regex = /^(.+) \((.+?)\): (.+) \((.+)\)$/;
                const match = message.match(regex);

                if (!match) {
                    console.error("Message format error: " + message);
                    return '';
                }

                const userName = match[1];      // Nombre del usuario
                const date = match[2];          // Fecha
                const text = match[3];          // Texto del mensaje
                const status = match[4];        // Estado

                console.log("Formatted Message Parts:", {userName, date, text, status});

                // Crear elementos DOM
                const container = document.createElement('div');
                container.className = 'message-container';

                const nameElement = document.createElement('div');
                nameElement.className = 'user-name';
                nameElement.textContent = userName;

                const textElement = document.createElement('div');
                textElement.className = 'message-text';
                textElement.textContent = text;

                const dateElement = document.createElement('div');
                dateElement.className = 'message-date';
                dateElement.textContent = date;

                const statusElement = document.createElement('span');
                statusElement.className = 'status-icon';
                if (status === "Visto") {
                    statusElement.innerHTML = '<i class="pi pi-eye"></i>'; // Ícono de ojo para "Visto"
                } else if (status === "No visto") {
                    statusElement.innerHTML = '<i class="pi pi-eye-slash"></i>'; // Ícono de ojo tachado para "No visto"
                } else {
                    statusElement.textContent = "";
                }

                // Agregar elementos al contenedor
                container.appendChild(nameElement);
                container.appendChild(textElement);
                container.appendChild(dateElement);
                container.appendChild(statusElement);

                return container;
            }



            window.onload = connect;
        </script>
    </h:head>
    <h:body>
        <div class="card">
            <h:form id="mainForm">

                <p:menubar styleClass="custom-menubar">

                    <p:menuitem icon="pi pi-home" outcome="Publicacion.xhtml">
                    </p:menuitem>

                    <p:menuitem value="Mi Perfil" icon="pi pi-fw pi-user" outcome="verperfil.xhtml">
                    </p:menuitem>

                    <p:menuitem value="Foro" icon="pi pi-fw pi-users">
                    </p:menuitem>

                    <p:menuitem id="chatMenuitem" icon="pi pi-fw pi-comment" >
                        <h:outputText value="Chats" />
                        <h:panelGroup id="chatMenuItem" styleClass="notification-badge">
                            <h:outputText value="#{chatController.notificacionChats}" styleClass="badge" rendered="#{chatController.notificacionChats > 0}" />
                        </h:panelGroup>
                    </p:menuitem>

                    <p:menuitem value="Cerrar Sesion" icon="pi pi-sign-out" outcome="IniciarSesion.xhtml">
                    </p:menuitem>

                    <p:menuitem>
                        <p:autoComplete id="buscador" 
                                        value="#{busquedaController.usuarioSeleccionado}" 
                                        completeMethod="#{busquedaController.obtenerResultados}" 
                                        var="usuario" 
                                        itemLabel="#{usuario.nombre}" 
                                        itemValue="#{usuario}" 
                                        forceSelection="true"
                                        converter="usuarioConverter"
                                        placeholder="Buscar...">
                            <p:ajax event="itemSelect" listener="#{busquedaController.redirigirUsuario}" update=":mainForm" />
                        </p:autoComplete>
                    </p:menuitem>

                </p:menubar>
                
                <!-- OverlayPanel para mostrar los chats -->
                <p:overlayPanel id="chatOverlay" for="chatMenuitem" widgetVar="chatOverlay" showEvent="click" hideEvent="click" my="left top" at="left bottom" style="z-index: 1000;">
                    <div class="chat-list">
                        <ui:repeat value="#{chatController.chats}" var="chat">
                            <div class="chat-item" onclick="PF('chatOverlay').hide();">
                                <div class="chat-avatar">
                                    <h:outputText value="#{chat.usuario2.nombre.substring(0, 1)}" />
                                </div>
                                <div class="chat-name">
                                    <p:commandLink value="#{chat.usuario2.nombre}" actionListener="#{chatController.IrChat(chat.usuario2.id)}" update=":mainForm">
                                        
                                    </p:commandLink>
                                </div>
                                <h:panelGroup rendered="#{chatController.chatsSinVer.contains(chat)}">
                                    <div class="chat-unread"></div>
                                </h:panelGroup>
                            </div>
                        </ui:repeat>
                        <h:panelGroup rendered="#{empty chatController.chats}">
                            <h:outputText value="No tienes chats" />
                        </h:panelGroup>
                    </div>
                </p:overlayPanel>

                <!-- Componente que será actualizado por p:poll -->
                <h:panelGroup id="chatNotification">
                    <h:outputText value="#{chatController.notificacionChats}" styleClass="badge" rendered="#{chatController.notificacionChats > 0}"/>
                </h:panelGroup>

                <p:poll interval="10" update="chatMenuItem chatOverlay" listener="#{chatController.Chats}" />
                
            </h:form>
        </div>
        <h:form id="chatForm">
            <p:panel header="Chat">
                <p:outputPanel id="chatPanel">
                    <!-- List to display messages -->
                    <ul id="messages" style="list-style-type: none; padding: 0; margin: 0;">
                    </ul>
                </p:outputPanel>
                <input type="text" id="message" placeholder="Escribe el mensaje" />
                <button type="button" onclick="sendMessage()">Enviar</button>
            </p:panel>
        </h:form>
    </h:body>
</html>